name: Build and Export Artifact for Mac OS

on:
  push:
    branches: [main, build-workflow] # Remember to remove
  pull_request:
    branches: [main]

env:
  IREE_SOURCE_DIR: ${{ github.workspace }}/thirdparty/iree
  IREE_BUILD_DIR: ${{ github.workspace }}/build_iree
  IREE_HOST_BIN_DIR: ${{ github.workspace }}/iree_dist
  SOURCE_DIR: ${{ github.workspace }}
  BUILD_DIR: ${{ github.workspace }}/build

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        target: [macos]
        arch: [universal]
        build_type: [release, debug]
        include:
          # Build type to cmake keyword.
          - build_type: release
            cmake_build_type_keyword: Release

          - build_type: debug
            cmake_build_type_keyword: RelWithDebInfo

          - os: macos-latest
            target: macos
            lib_suffix: dylib

          # Define toolchain data.
          - target: macos
            arch: universal
            cmake_arch_keyword: MAC_UNIVERSAL

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Get CMake IOS Toolchain
        uses: GuillaumeFalourd/clone-github-repo-action@v2.2
        with:
          branch: master
          owner: leetal
          repository: ios-cmake

      - name: Install LLVM
        shell: bash
        run: |
          brew install llvm
          echo '/usr/local/opt/llvm/bin' >> $GITHUB_PATH

      - name: Prepare IREE host binaries
        shell: bash
        run: |
          if [ ! -d "${IREE_BUILD_DIR}" ]; then
            mkdir "${IREE_BUILD_DIR}"
          fi
          cd "${IREE_BUILD_DIR}"
          cmake "${IREE_SOURCE_DIR}" -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DIREE_BUILD_SAMPLES=OFF \
            -DIREE_BUILD_BUNDLED_LLVM=OFF \
            -DLLVM_DIR="$(llvm-config --cmakedir)" \
            -DCMAKE_INSTALL_PREFIX="${IREE_HOST_BIN_DIR}"
          cmake --build .
          cmake --build . --target install

      # Setup CMake
      - name: Set up CMake for MacOS
        shell: bash
        run: |
          if [ ! -d "${BUILD_DIR}" ]; then
            mkdir "${BUILD_DIR}"
          fi
          cd "${BUILD_DIR}"
          cmake "${SOURCE_DIR}" -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type_keyword }} \
            -DIREE_HOST_BIN_DIR="${IREE_HOST_BIN_DIR}/bin" \
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/ios-cmake/ios.toolchain.cmake" \
            -DPLATFORM="${{ matrix.cmake_arch_keyword }}"

      - name: Build project
        shell: bash
        run: ninja -C "${BUILD_DIR}"

      - name: Export artifact
        uses: actions/upload-artifact@v2
        with:
          name: "libiree-gd.${{ matrix.target }}.${{ matrix.build_type }}.${{ matrix.arch }}.${{ matrix.lib_suffix }}"
          path: "${{ github.workspace }}/build/lib/*"
          if-no-files-found: error
