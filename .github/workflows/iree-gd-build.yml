name: Build and Export Artifact

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IREE_SOURCE_DIR: ${{ github.workspace }}/thirdparty/iree
  IREE_BUILD_DIR: ${{ github.workspace }}/build_iree
  IREE_HOST_BIN_DIR: ${{ github.workspace }}/iree_dist
  SOURCE_DIR: ${{ github.workspace }}
  BUILD_DIR: ${{ github.workspace }}/build

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        target: [linux, macos, windows, android, ios]
        arch: [x86_64, x86_32, arm64, arm32, universal]
        build_type: [release, debug]
        exclude:
          # Exclude arch unsupported by linux.
          - target: linux
            arch: universal

          # Exclude arch unsupported by macos.
          - target: macos
            arch: x86_64
          - target: macos
            arch: x86_32
          - target: macos
            arch: arm64
          - target: macos
            arch: arm32

          # Exclude arch unsupported by windows.
          - target: windows
            arch: arm64
          - target: windows
            arch: arm32
          - target: windows
            arch: universal

          # Exclude arch unsupported by android.
          - target: android
            arch: x86_32
          - target: android
            arch: arm32
          - target: android
            arch: universal

          # Exclude arch unsupported by ios.
          - target: ios
            arch: x86_32
          - target: ios
            arch: arm32
          - target: ios
            arch: universal
        include:
          # Build type to cmake keyword.
          - build_type: release
            cmake_build_type_keyword: Release

          - build_type: debug
            cmake_build_type_keyword: RelWithDebInfo

          # Define host for each target.
          - os: ubuntu-latest
            target: linux
            lib_suffix: so

          - os: ubuntu-latest
            target: android
            lib_suffix: so

          - os: windows-latest
            target: windows
            lib_suffix: dll

          - os: macos-latest
            target: macos
            lib_suffix: dylib

          - os: macos-latest
            target: ios
            lib_suffix: dylib

          # Define toolchain data.
          - target: linux
            arch: x86_64
            dependencies: gcc-x86-64-linux-gnu g++-x86-64-linux-gnu
            cxxflags: -m64
            c_compiler: x86-64-linux-gnu-gcc
            cxx_compiler: x86-64-linux-gnu-g++

          - target: linux
            arch: x86_32
            dependencies: gcc-x86-64-linux-gnu g++-x86-64-linux-gnu
            cxxflags: -m32
            c_compiler: x86-64-linux-gnu-gcc
            cxx_compiler: x86-64-linux-gnu-g++

          - target: linux
            arch: arm64
            dependencies: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            cxxflags: ""
            c_compiler: aarch64-linux-gnu-gcc
            cxx_compiler: aarch64-linux-gnu-g++

          - target: linux
            arch: arm32
            dependencies: gcc-arm-linux-gnueabi g++-arm-linux-gnueabi
            cxxflags: ""
            c_compiler: amr-linux-gnueabi-gcc
            cxx_compiler: amr-linux-gnueabi-g++

          - target: windows
            arch: x86_64
            cmake_arch_keyword: x64

          - target: windows
            arch: x86_32
            cmake_arch_keyword: x86

          - target: android
            arch: arm64
            cmake_arch_keyword: arm64-v8a

          - target: android
            arch: x86_64
            cmake_arch_keyword: x86_64

          - target: macos
            arch: universal
            cmake_arch_keyword: x86_64;i386

          - target: ios
            arch: arm64
            cmake_arch_keyword: OS64

          - target: ios
            arch: x86_64
            cmake_arch_keyword: SIMULATOR64

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      # TODO: Save me from this suffocation and configure CMake to compile for multiple linux architecture.
      #- name: Prepare cross-compiler for Linux
      #  if: matrix.target == 'linux'
      #  run: |
      #    sudo apt update
      #    sudo apt -y install ${{ matrix.dependencies }}

      - name: Prepare Vulkan SDK
        if: matrix.target == 'linux'
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.204.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      - name: Set up MSVC Dev Cmd
        if: matrix.target == 'windows'
        uses: ilammy/msvc-dev-cmd@7315a94840631165970262a99c72cfb48a65d25d # v1.12.0
        with:
          arch: ${{ matrix.cmake_arch_keyword }}

      - name: Setup Android NDK
        id: android-ndk
        if: matrix.target == 'android'
        uses: nttld/setup-ndk@v1.4.2
        with:
          ndk-version: r25c

      - name: Prepare IREE host binaries
        id: iree-host-bin
        shell: bash
        run: |
          if [ ! -d "${IREE_BUILD_DIR}" ]; then
            mkdir "${IREE_BUILD_DIR}"
          fi
          cd "${IREE_BUILD_DIR}"
          cmake "${IREE_SOURCE_DIR}" -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DIREE_BUILD_COMPILER=OFF \
            -DIREE_BUILD_SAMPLES=OFF \
            -DIREE_BUILD_BUNDLED_LLVM=OFF \
            -DCMAKE_INSTALL_PREFIX="${IREE_HOST_BIN_DIR}"
          cmake --build .
          cmake --build . --target install

      - name: Get CMake IOS Toolchain
        if: matrix.target == 'ios'
        uses: GuillaumeFalourd/clone-github-repo-action@v2.2
        with:
          branch: master
          owner: leetal
          repository: ios-cmake

      # Setup CMake
      - name: Set up CMake for Linux
        if: matrix.target == 'linux'
        shell: bash
        run: |
          if [ ! -d "${BUILD_DIR}" ]; then
            mkdir "${BUILD_DIR}"
          fi
          cd "${BUILD_DIR}"
          cmake "${SOURCE_DIR}" -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type_keyword }} \
            -DIREE_HOST_BIN_DIR="${IREE_HOST_BIN_DIR}/bin" \
      #      -DCMAKE_CXX_FLAGS="${{ matrix.cxxflags }}" \
      #      -DCMAKE_C_COMPILER="${{ matrix.c_compiler }}" \
      #      -DCMAKE_CXX_COMPILER="${{ matrix.cxx_compiler }}"

      - name: Set up CMake for Windows
        if: matrix.target == 'windows'
        shell: bash
        run: |
          if [ ! -d "${BUILD_DIR}" ]; then
            mkdir "${BUILD_DIR}"
          fi
          cd "${BUILD_DIR}"
          cmake "${SOURCE_DIR}" -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type_keyword }} \
            -DIREE_HOST_BIN_DIR="${IREE_HOST_BIN_DIR}/bin"

      - name: Set up CMake for Android
        if: matrix.target == 'android'
        shell: bash
        run: |
          if [ ! -d "${BUILD_DIR}" ]; then
            mkdir "${BUILD_DIR}"
          fi
          cd "${BUILD_DIR}"
          cmake "${SOURCE_DIR}" -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type_keyword }} \
            -DIREE_HOST_BIN_DIR="${IREE_HOST_BIN_DIR}/bin" \
            -DCMAKE_TOOLCHAIN_FILE="${{ steps.android-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake" \
            -DANDROID_ABI=${{ matrix.cmake_arch_keyword }}

      - name: Set up CMake for MacOS
        if: matrix.target == 'macos'
        shell: bash
        run: |
          if [ ! -d "${BUILD_DIR}" ]; then
            mkdir "${BUILD_DIR}"
          fi
          cd "${BUILD_DIR}"
          cmake "${SOURCE_DIR}" -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type_keyword }} \
            -DIREE_HOST_BIN_DIR="${IREE_HOST_BIN_DIR}/bin" \
            -DCMAKE_OSX_ARCHITECTURES="${{ matrix.cmake_arch_keyword }}"

      - name: Set up CMake for IOS
        if: matrix.target == 'ios'
        shell: bash
        run: |
          if [ ! -d "${BUILD_DIR}" ]; then
            mkdir "${BUILD_DIR}"
          fi
          cd "${BUILD_DIR}"
          cmake "${SOURCE_DIR}" -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type_keyword }} \
            -DIREE_HOST_BIN_DIR="${IREE_HOST_BIN_DIR}/bin" \
            -DCMAKE_TOOLCHAIN_FILE=../ios-cmake/ios.toolchain.cmake \
            -DPLATFORM=${{ matrix.cmake_arch_keyword }}

      - name: Build project
        run: ninja -C "${BUILD_DIR}"

      - name: Export artifact
        uses: actions/upload-artifact@v2
        with:
          name: "libiree-gd.${{ matrix.target }}.${{ matrix.build_type }}.${{ matrix.arch }}.${{ matrix.lib_suffix }}"
          path: "${BUILD_DIR}/lib/libiree-gd.${{ matrix.target }}.${{ matrix.build_type }}.${{ matrix.arch }}.${{ matrix.lib_suffix }}"
