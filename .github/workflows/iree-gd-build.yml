name: Build and Export Artifact

on:
  push:
    branches: [main, build-workflow] # Remember to remove `build-workflow`
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        target: [linux, macos, windows, android, ios]
        arch: [x86_64, x86_32, arm64, arm32, universal]
        build_type: [release, debug]
        exclude:
          # Exclude arch unsupported by linux.
          - target: linux
            arch: universal

          # Exclude arch unsupported by macos.
          - target: macos
            arch: x86_64
          - target: macos
            arch: x86_32
          - target: macos
            arch: arm64
          - target: macos
            arch: arm32

          # Exclude arch unsupported by windows.
          - target: windows
            arch: arm64
          - target: windows
            arch: arm32
          - target: windows
            arch: universal

          # Exclude arch unsupported by android.
          - target: android
            arch: x86_32
          - target: android
            arch: arm32
          - target: android
            arch: universal

          # Exclude arch unsupported by ios.
          - target: ios
            arch: x86_32
          - target: ios
            arch: arm32
          - target: ios
            arch: universal
        include:
          # Build type to cmake keyword.
          - build_type: release
            cmake_build_type_keyword: Release

          - build_type: debug
            cmake_build_type_keyword: RelWithDebInfo

          # Define host for each target.
          - os: ubuntu-latest
            target: linux
            lib_suffix: so

          - os: ubuntu-latest
            target: android
            lib_suffix: so

          - os: windows-latest
            target: windows
            lib_suffix: dll

          - os: macos-latest
            target: macos
            lib_suffix: dylib

          - os: macos-latest
            target: ios
            lib_suffix: dylib

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Prepare Vulkan SDK
        if: matrix.target == 'linux'
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.204.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      - name: Set up MSVC Dev Cmd
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@7315a94840631165970262a99c72cfb48a65d25d # v1.12.0

      - name: Setup ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Setup Android NDK
        if: matrix.target == 'android'
        uses: nttld/setup-ndk@v1.4.2

      - name: Get CMake Android Toolchain
        if: matrix.target == 'android'
        uses: GuillaumeFalourd/clone-github-repo-action@v2.2
        with:
          branch: main
          owner: taka-no-me
          repository: android-cmake
        run: TOOLCHAIN='android-cmake/android.toolchain.cmake'

      - name: Get CMake ios Toolchain
        if: matrix.target == 'ios'
        uses: GuillaumeFalourd/clone-github-repo-action@v2.2
        with:
          branch: main
          owner: leetal
          repository: ios-cmake
        run: TOOLCHAIN='ios-cmake/ios.toolchain.cmake'

      - name: Set up CMake
        shell: bash
        run: |
          if [ ! -d build ]; then
          mkdir build
          fi
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type_keyword }} $([ -z ${var+foo} ] || echo "-DCMAKE_TOOLCHAIN_FILE=../$TOOLCHAIN")

      - name: Build project
        run: ninja -C build

      - name: Export artifact
        uses: actions/upload-artifact@v2
        with:
          name: "libiree-gd.${{ matrix.target }}.${{ matrix.build_type }}.${{ matrix.arch }}.${{ matrix.lib_suffix }}"
          path: "build/lib/libiree-gd.${{ matrix.target }}.${{ matrix.build_type }}.${{ matrix.arch }}.${{ matrix.lib_suffix }}"
